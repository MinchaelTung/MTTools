//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18010
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace SLMultiFileUploaderApplication.WcfService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfService.IUploadFileService")]
    public interface IUploadFileService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadFileService/StoreFileAdvanced", ReplyAction="http://tempuri.org/IUploadFileService/StoreFileAdvancedResponse")]
        System.IAsyncResult BeginStoreFileAdvanced(string fileName, byte[] data, int dataLength, string parameters, bool firstChunk, bool lastChunk, System.AsyncCallback callback, object asyncState);
        
        void EndStoreFileAdvanced(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadFileService/CancelUpload", ReplyAction="http://tempuri.org/IUploadFileService/CancelUploadResponse")]
        System.IAsyncResult BeginCancelUpload(string filename, System.AsyncCallback callback, object asyncState);
        
        void EndCancelUpload(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadFileService/AbortUpload", ReplyAction="http://tempuri.org/IUploadFileService/AbortUploadResponse")]
        System.IAsyncResult BeginAbortUpload(string filename, System.AsyncCallback callback, object asyncState);
        
        void EndAbortUpload(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUploadFileService/GetServerFilePath", ReplyAction="http://tempuri.org/IUploadFileService/GetServerFilePathResponse")]
        System.IAsyncResult BeginGetServerFilePath(string fileName, bool firstChunk, bool lastChunk, System.AsyncCallback callback, object asyncState);
        
        string EndGetServerFilePath(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUploadFileServiceChannel : SLMultiFileUploaderApplication.WcfService.IUploadFileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServerFilePathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServerFilePathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadFileServiceClient : System.ServiceModel.ClientBase<SLMultiFileUploaderApplication.WcfService.IUploadFileService>, SLMultiFileUploaderApplication.WcfService.IUploadFileService {
        
        private BeginOperationDelegate onBeginStoreFileAdvancedDelegate;
        
        private EndOperationDelegate onEndStoreFileAdvancedDelegate;
        
        private System.Threading.SendOrPostCallback onStoreFileAdvancedCompletedDelegate;
        
        private BeginOperationDelegate onBeginCancelUploadDelegate;
        
        private EndOperationDelegate onEndCancelUploadDelegate;
        
        private System.Threading.SendOrPostCallback onCancelUploadCompletedDelegate;
        
        private BeginOperationDelegate onBeginAbortUploadDelegate;
        
        private EndOperationDelegate onEndAbortUploadDelegate;
        
        private System.Threading.SendOrPostCallback onAbortUploadCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServerFilePathDelegate;
        
        private EndOperationDelegate onEndGetServerFilePathDelegate;
        
        private System.Threading.SendOrPostCallback onGetServerFilePathCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public UploadFileServiceClient() {
        }
        
        public UploadFileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UploadFileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploadFileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploadFileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StoreFileAdvancedCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CancelUploadCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AbortUploadCompleted;
        
        public event System.EventHandler<GetServerFilePathCompletedEventArgs> GetServerFilePathCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLMultiFileUploaderApplication.WcfService.IUploadFileService.BeginStoreFileAdvanced(string fileName, byte[] data, int dataLength, string parameters, bool firstChunk, bool lastChunk, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStoreFileAdvanced(fileName, data, dataLength, parameters, firstChunk, lastChunk, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SLMultiFileUploaderApplication.WcfService.IUploadFileService.EndStoreFileAdvanced(System.IAsyncResult result) {
            base.Channel.EndStoreFileAdvanced(result);
        }
        
        private System.IAsyncResult OnBeginStoreFileAdvanced(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            byte[] data = ((byte[])(inValues[1]));
            int dataLength = ((int)(inValues[2]));
            string parameters = ((string)(inValues[3]));
            bool firstChunk = ((bool)(inValues[4]));
            bool lastChunk = ((bool)(inValues[5]));
            return ((SLMultiFileUploaderApplication.WcfService.IUploadFileService)(this)).BeginStoreFileAdvanced(fileName, data, dataLength, parameters, firstChunk, lastChunk, callback, asyncState);
        }
        
        private object[] OnEndStoreFileAdvanced(System.IAsyncResult result) {
            ((SLMultiFileUploaderApplication.WcfService.IUploadFileService)(this)).EndStoreFileAdvanced(result);
            return null;
        }
        
        private void OnStoreFileAdvancedCompleted(object state) {
            if ((this.StoreFileAdvancedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StoreFileAdvancedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StoreFileAdvancedAsync(string fileName, byte[] data, int dataLength, string parameters, bool firstChunk, bool lastChunk) {
            this.StoreFileAdvancedAsync(fileName, data, dataLength, parameters, firstChunk, lastChunk, null);
        }
        
        public void StoreFileAdvancedAsync(string fileName, byte[] data, int dataLength, string parameters, bool firstChunk, bool lastChunk, object userState) {
            if ((this.onBeginStoreFileAdvancedDelegate == null)) {
                this.onBeginStoreFileAdvancedDelegate = new BeginOperationDelegate(this.OnBeginStoreFileAdvanced);
            }
            if ((this.onEndStoreFileAdvancedDelegate == null)) {
                this.onEndStoreFileAdvancedDelegate = new EndOperationDelegate(this.OnEndStoreFileAdvanced);
            }
            if ((this.onStoreFileAdvancedCompletedDelegate == null)) {
                this.onStoreFileAdvancedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStoreFileAdvancedCompleted);
            }
            base.InvokeAsync(this.onBeginStoreFileAdvancedDelegate, new object[] {
                        fileName,
                        data,
                        dataLength,
                        parameters,
                        firstChunk,
                        lastChunk}, this.onEndStoreFileAdvancedDelegate, this.onStoreFileAdvancedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLMultiFileUploaderApplication.WcfService.IUploadFileService.BeginCancelUpload(string filename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCancelUpload(filename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SLMultiFileUploaderApplication.WcfService.IUploadFileService.EndCancelUpload(System.IAsyncResult result) {
            base.Channel.EndCancelUpload(result);
        }
        
        private System.IAsyncResult OnBeginCancelUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string filename = ((string)(inValues[0]));
            return ((SLMultiFileUploaderApplication.WcfService.IUploadFileService)(this)).BeginCancelUpload(filename, callback, asyncState);
        }
        
        private object[] OnEndCancelUpload(System.IAsyncResult result) {
            ((SLMultiFileUploaderApplication.WcfService.IUploadFileService)(this)).EndCancelUpload(result);
            return null;
        }
        
        private void OnCancelUploadCompleted(object state) {
            if ((this.CancelUploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CancelUploadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CancelUploadAsync(string filename) {
            this.CancelUploadAsync(filename, null);
        }
        
        public void CancelUploadAsync(string filename, object userState) {
            if ((this.onBeginCancelUploadDelegate == null)) {
                this.onBeginCancelUploadDelegate = new BeginOperationDelegate(this.OnBeginCancelUpload);
            }
            if ((this.onEndCancelUploadDelegate == null)) {
                this.onEndCancelUploadDelegate = new EndOperationDelegate(this.OnEndCancelUpload);
            }
            if ((this.onCancelUploadCompletedDelegate == null)) {
                this.onCancelUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCancelUploadCompleted);
            }
            base.InvokeAsync(this.onBeginCancelUploadDelegate, new object[] {
                        filename}, this.onEndCancelUploadDelegate, this.onCancelUploadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLMultiFileUploaderApplication.WcfService.IUploadFileService.BeginAbortUpload(string filename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAbortUpload(filename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SLMultiFileUploaderApplication.WcfService.IUploadFileService.EndAbortUpload(System.IAsyncResult result) {
            base.Channel.EndAbortUpload(result);
        }
        
        private System.IAsyncResult OnBeginAbortUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string filename = ((string)(inValues[0]));
            return ((SLMultiFileUploaderApplication.WcfService.IUploadFileService)(this)).BeginAbortUpload(filename, callback, asyncState);
        }
        
        private object[] OnEndAbortUpload(System.IAsyncResult result) {
            ((SLMultiFileUploaderApplication.WcfService.IUploadFileService)(this)).EndAbortUpload(result);
            return null;
        }
        
        private void OnAbortUploadCompleted(object state) {
            if ((this.AbortUploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AbortUploadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AbortUploadAsync(string filename) {
            this.AbortUploadAsync(filename, null);
        }
        
        public void AbortUploadAsync(string filename, object userState) {
            if ((this.onBeginAbortUploadDelegate == null)) {
                this.onBeginAbortUploadDelegate = new BeginOperationDelegate(this.OnBeginAbortUpload);
            }
            if ((this.onEndAbortUploadDelegate == null)) {
                this.onEndAbortUploadDelegate = new EndOperationDelegate(this.OnEndAbortUpload);
            }
            if ((this.onAbortUploadCompletedDelegate == null)) {
                this.onAbortUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAbortUploadCompleted);
            }
            base.InvokeAsync(this.onBeginAbortUploadDelegate, new object[] {
                        filename}, this.onEndAbortUploadDelegate, this.onAbortUploadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SLMultiFileUploaderApplication.WcfService.IUploadFileService.BeginGetServerFilePath(string fileName, bool firstChunk, bool lastChunk, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServerFilePath(fileName, firstChunk, lastChunk, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SLMultiFileUploaderApplication.WcfService.IUploadFileService.EndGetServerFilePath(System.IAsyncResult result) {
            return base.Channel.EndGetServerFilePath(result);
        }
        
        private System.IAsyncResult OnBeginGetServerFilePath(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            bool firstChunk = ((bool)(inValues[1]));
            bool lastChunk = ((bool)(inValues[2]));
            return ((SLMultiFileUploaderApplication.WcfService.IUploadFileService)(this)).BeginGetServerFilePath(fileName, firstChunk, lastChunk, callback, asyncState);
        }
        
        private object[] OnEndGetServerFilePath(System.IAsyncResult result) {
            string retVal = ((SLMultiFileUploaderApplication.WcfService.IUploadFileService)(this)).EndGetServerFilePath(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServerFilePathCompleted(object state) {
            if ((this.GetServerFilePathCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServerFilePathCompleted(this, new GetServerFilePathCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServerFilePathAsync(string fileName, bool firstChunk, bool lastChunk) {
            this.GetServerFilePathAsync(fileName, firstChunk, lastChunk, null);
        }
        
        public void GetServerFilePathAsync(string fileName, bool firstChunk, bool lastChunk, object userState) {
            if ((this.onBeginGetServerFilePathDelegate == null)) {
                this.onBeginGetServerFilePathDelegate = new BeginOperationDelegate(this.OnBeginGetServerFilePath);
            }
            if ((this.onEndGetServerFilePathDelegate == null)) {
                this.onEndGetServerFilePathDelegate = new EndOperationDelegate(this.OnEndGetServerFilePath);
            }
            if ((this.onGetServerFilePathCompletedDelegate == null)) {
                this.onGetServerFilePathCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServerFilePathCompleted);
            }
            base.InvokeAsync(this.onBeginGetServerFilePathDelegate, new object[] {
                        fileName,
                        firstChunk,
                        lastChunk}, this.onEndGetServerFilePathDelegate, this.onGetServerFilePathCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SLMultiFileUploaderApplication.WcfService.IUploadFileService CreateChannel() {
            return new UploadFileServiceClientChannel(this);
        }
        
        private class UploadFileServiceClientChannel : ChannelBase<SLMultiFileUploaderApplication.WcfService.IUploadFileService>, SLMultiFileUploaderApplication.WcfService.IUploadFileService {
            
            public UploadFileServiceClientChannel(System.ServiceModel.ClientBase<SLMultiFileUploaderApplication.WcfService.IUploadFileService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginStoreFileAdvanced(string fileName, byte[] data, int dataLength, string parameters, bool firstChunk, bool lastChunk, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = fileName;
                _args[1] = data;
                _args[2] = dataLength;
                _args[3] = parameters;
                _args[4] = firstChunk;
                _args[5] = lastChunk;
                System.IAsyncResult _result = base.BeginInvoke("StoreFileAdvanced", _args, callback, asyncState);
                return _result;
            }
            
            public void EndStoreFileAdvanced(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("StoreFileAdvanced", _args, result);
            }
            
            public System.IAsyncResult BeginCancelUpload(string filename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = filename;
                System.IAsyncResult _result = base.BeginInvoke("CancelUpload", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCancelUpload(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CancelUpload", _args, result);
            }
            
            public System.IAsyncResult BeginAbortUpload(string filename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = filename;
                System.IAsyncResult _result = base.BeginInvoke("AbortUpload", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAbortUpload(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AbortUpload", _args, result);
            }
            
            public System.IAsyncResult BeginGetServerFilePath(string fileName, bool firstChunk, bool lastChunk, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = fileName;
                _args[1] = firstChunk;
                _args[2] = lastChunk;
                System.IAsyncResult _result = base.BeginInvoke("GetServerFilePath", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetServerFilePath(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetServerFilePath", _args, result)));
                return _result;
            }
        }
    }
}
